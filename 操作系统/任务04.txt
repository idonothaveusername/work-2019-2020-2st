1、请详细说明什么是装入时动态链接，有何优缺点？
 装入时动态链接：用户源程序经编译后所得的目标模块，是在装入内存时，边装入边链接的，即在装入一个目标模块时，若发生一个外部模块调用事件，将引起装入程序去找出相应的外部目标模块，并将它装入内存，还要修改目标模块中的相对地址。
优点：
便于修改和更新
便于实现对目标模块的共享
缺点：
低效：很多情况下，应用程序在运行时，每次要运行的模块可能都是不相同的，但由于事先无法知道本次要运行那些模块，只能将所有可能要运行到的模块全部都装入内存，并在装入时全部链接在一起，这样做很低效，因为往往会有部分目标模块根本就不运行。
2、请详细说明在分页系统中是如何实现地址变换的？
页表的功能可以由一组专门的寄存器来实现，一个页表项用一个寄存器。但寄存器成本高，系统页表可能很大，所以页表大多常驻内存。在系统中只设置一个页表寄存器PTR，在其中存放页表在内存中的始址和页表的长度。
当进程要访问某个逻辑地址中的数据时，分页地址变换程序会自动将有效地址分为页号和页内地址两部分，再以页号为索引去检索页表。查找操作由硬件系统执行。在执行检索之前，先将页号与页表长度进行比较，如果页号大于或等于页表长度，则表示本次所访问的地址已经超出进程的地址空间，会产生地址越界中断。若未出现越界中断，则将页表始址与(页号*页表项长度)相加，就可以得到该表项在页表中的位置，从而得到该页的物理块号，将之装入物理地址寄存器中。同时，再将有效地址寄存器中的页内地址送入物理地址寄存器的块内地址字段中。这样就完成了从逻辑地址到物理地址的变换。
3、
[0,65]对应的主存地址：600+65=665
[1,55]对应的主存地址：段内地址超过段长，会产生段地址越界中断
[2,90]对应的主存地址：1000+90=1090
[3,20]对应的主存地址：状态位为0，该段在辅存中，会产生缺段中断